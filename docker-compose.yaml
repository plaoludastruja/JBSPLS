version: "3.3"
services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./Skitnica/backend/user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network
  accomodation_service:
    image: accomodation_service
    container_name: accomodation_service
    build:
      context: .
      dockerfile: ./Skitnica/backend/accomodation_service/Dockerfile
    restart: on-failure
    environment:
      ACCOMODATION_DB_HOST: ${ACCOMODATION_DB_HOST}
      ACCOMODATION_DB_PORT: ${ACCOMODATION_DB_PORT}
      ACCOMODATION_SERVICE_PORT: ${ACCOMODATION_SERVICE_PORT}
    depends_on:
      - accomodation_db
    networks:
      - network
  appointment_service:
    image: appointment_service
    container_name: appointment_service
    build:
      context: .
      dockerfile: ./Skitnica/backend/appointment_service/Dockerfile
    restart: on-failure
    environment:
      APPOINTMENT_DB_HOST: ${APPOINTMENT_DB_HOST}
      APPOINTMENT_DB_PORT: ${APPOINTMENT_DB_PORT}
      APPOINTMENT_SERVICE_PORT: ${APPOINTMENT_SERVICE_PORT}
    depends_on:
      - appointment_db
    networks:
      - network

  reservation_service:
    image: reservation_service
    container_name: reservation_service
    build:
      context: .
      dockerfile: ./Skitnica/backend/reservation_service/Dockerfile
    restart: on-failure
    environment:
      RESERVATION_DB_HOST: ${RESERVATION_DB_HOST}
      RESERVATION_DB_PORT: ${RESERVATION_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
    depends_on:
      - reservation_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./Skitnica/backend/api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      ACCOMODATION_SERVICE_HOST: ${ACCOMODATION_SERVICE_HOST}
      ACCOMODATION_SERVICE_PORT: ${ACCOMODATION_SERVICE_PORT}
      APPOINTMENT_SERVICE_HOST: ${APPOINTMENT_SERVICE_HOST}
      APPOINTMENT_SERVICE_PORT: ${APPOINTMENT_SERVICE_PORT}
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}

    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  accomodation_db:
    image: mongo
    container_name: accomodation_db
    restart: on-failure
    networks:
      - network
    ports:
      - 27018:${ACCOMODATION_DB_PORT} # test

  appointment_db:
    image: mongo
    container_name: appointment_db
    restart: on-failure
    networks:
      - network

  reservation_db:
    image: mongo
    container_name: reservation_db
    restart: on-failure
    networks:
      - network
    ports:
      - ${RESERVATION_DB_PORT}:${RESERVATION_DB_PORT}

networks:
  network:
    driver: bridge

  # #baza
  # mongo:
  #   image: "mongo:latest"
  #   container_name: "mongo"
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - type: bind
  #       source: ./data
  #       target: /data/db
  # #back
  # lsbackend:
  #   container_name: "lsbackend"
  #   build: "./LetiSleti/LSbackend"
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - "./LetiSleti/LSbackend:/app"
  #   depends_on:
  #     - "mongo"
  # #front
  # lsfrontend:
  #   container_name: "lsfrontend"
  #   build: "./LetiSleti/LSfrontend"
  #   ports:
  #     - "4200:4200"
  #   volumes:
  #     - "./LetiSleti/LSfrontend:/usr/local/app"
  #   depends_on:
  #     - "lsbackend"
